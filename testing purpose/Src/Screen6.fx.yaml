"Screen6 As screen.'tabletLayout_Meeting_ver3.0'":

    RectQuickActionBar2 As rectangle:
        Height: =64
        Width: =Parent.Width
        ZIndex: =1

    LblAppName2 As label:
        Height: =64
        Text: ="Meeting"
        Width: =356
        Wrap: =false
        X: =20
        ZIndex: =2

    IconSendItem1 As icon.Send:
        AccessibleLabel: =Self.Tooltip
        DisabledFill: =RGBA(240, 240, 240, 0.5)
        DisplayMode: =If(Len(Trim(TextMeetingSubject1.Text)) > 0 && !IsEmpty(MyPeople) && !IsBlank(_selectedMeetingTime), DisplayMode.Edit, DisplayMode.Disabled)
        Icon: =Icon.Send
        OnSelect: |-
            =/*sends a meeting invite if necessary fields are filled out (attendees, subject, meeting time selection)*/
            Set(_myCalendarName, LookUp(Office365Outlook.CalendarGetTables().value, DisplayName = "Calendar").Name);
            Set(_myScheduledMeeting, Office365Outlook.V2CalendarPostItem(_myCalendarName,
             TextMeetingSubject1.Text, Text(DateAdd(DateTimeValue(_selectedMeetingTime.StartTime), -TimeZoneOffset(), TimeUnit.Minutes)),
             Text(DateAdd(DateTimeValue(_selectedMeetingTime.EndTime), -TimeZoneOffset(), TimeUnit.Minutes)),
             {RequiredAttendees:Concat(MyPeople, UserPrincipalName & ";") & _selectedRoom.Address, Body: TextMeetingMessage1.Text, Location: _selectedRoom.Name, Importance: "Normal", ShowAs:"Busy", ResponseRequested: true}));
             Concurrent(
               Reset(TextMeetingLocation1),
               Reset(TextMeetingSubject1),
               Reset(TextMeetingMessage1),
               Clear(MyPeople),
               Set(_selectedMeetingTime, Blank()),
               Set(_selectedRoomList, Blank()),
               Set(_selectedRoom, Blank()),
               Set(_roomListSelected, false)
            )
        PaddingBottom: =14
        PaddingLeft: =14
        PaddingRight: =14
        PaddingTop: =14
        TabIndex: =0
        Tooltip: ="Send invite"
        X: =Parent.Width - Self.Width
        ZIndex: =3

    LblInviteTab1 As label:
        Align: =Align.Center
        BorderColor: =Self.Color
        Color: =If(_showDetails, LblRecipientCount2.Color, RectQuickActionBar2.Fill)
        FocusedBorderThickness: =2
        FontWeight: =If(_showDetails, FontWeight.Normal, FontWeight.Semibold)
        Height: =25
        OnSelect: =Set(_showDetails, false)
        Size: =12
        TabIndex: =0
        Text: ="Invite"
        Tooltip: ="Select to fill out meeting subject, body, and attendees"
        Width: =Parent.Width / 2 - 55.5
        Wrap: =false
        X: =32
        Y: =RectQuickActionBar2.Height + 16
        ZIndex: =4

    LblScheduleTab1 As label:
        Align: =Align.Center
        BorderColor: =Self.Color
        Color: =If(!_showDetails, LblRecipientCount2.Color, RectQuickActionBar2.Fill)
        FocusedBorderThickness: =2
        FontWeight: =If(!_showDetails, FontWeight.Normal, FontWeight.Semibold)
        Height: =25
        OnSelect: =Set(_showDetails, true)
        Size: =12
        TabIndex: =0
        Text: ="Schedule"
        Tooltip: ="Select to fill out meeting date, duration, and location"
        Width: =Parent.Width / 2 - 55.5
        Wrap: =false
        X: =LblInviteTab1.X + LblInviteTab1.Width + 3
        Y: =RectQuickActionBar2.Height + 16
        ZIndex: =5

    RectHeaderSep1 As rectangle:
        Height: =2
        Width: =Parent.Width
        Y: =LblInviteTab1.Y + LblInviteTab1.Height + 8
        ZIndex: =6

    RectTabSelect1 As rectangle:
        Height: =2
        Width: =LblInviteTab1.Width + 3
        X: =If(_showDetails, LblScheduleTab1.X - 1.5, LblInviteTab1.X - 1.5)
        Y: =LblInviteTab1.Y + LblInviteTab1.Height + 8
        ZIndex: =7

    LblRecipientCount2 As label:
        Height: =26
        Size: =13
        Text: ="*Attendees (" &CountRows(MeetingPeopleGallery1.AllItems) & ")"
        Visible: =!_showDetails
        Width: =200
        Wrap: =false
        X: =32
        Y: =RectTabSelect1.Y + RectTabSelect1.Height + 24
        ZIndex: =8

    TextSearchBox2 As text:
        AccessibleLabel: ="Search people or add email address. At least one recipient is required for a successful submission."
        Default: =""
        HintText: ="Search for people"
        PaddingLeft: =40
        Visible: =!_showDetails
        Width: =Parent.Width - Self.X * 2
        X: =32
        Y: =LblRecipientCount2.Y + LblRecipientCount2.Height + 6
        ZIndex: =9

    SearchIcon2 As icon.Search:
        Height: =Self.Width
        Icon: =Icon.Search
        PaddingBottom: =9
        PaddingLeft: =9
        PaddingRight: =9
        PaddingTop: =9
        Tooltip: ="Search"
        Visible: =!_showDetails
        Width: =TextSearchBox2.Height
        X: =TextSearchBox2.X
        Y: =TextSearchBox2.Y
        ZIndex: =10

    AddIcon2 As icon.Add:
        Height: =TextSearchBox2.Height
        Icon: =Icon.Add
        OnSelect: |-
            =Collect(MyPeople, {DisplayName: TextSearchBox2.Text, UserPrincipalName: TextSearchBox2.Text});
            Concurrent(
            Reset(TextSearchBox2),
            Set(_showMeetingTimes, false),
            UpdateContext({_loadMeetingTimes: true}),
            Set(_selectedMeetingTime, Blank()),
            Set(_selectedRoom, Blank()),
            Set(_roomListSelected, false),
            /*
            Uses Office365 Outlook FindMeetingTimes operation to find available meeting times given various parameters including a semicolon separated list of attendee email addresses,
            a meeting duration (in minutes), an acceptable start and end range to find the meeting.
            Attendee emails are retrieved from the MyPeople collection. Duration and Start/End are retrieved from their respective dropdowns, where Start is set to 8:00 AM on the date selected, and End is set to 5:00 PM on the date selected.
            */
            ClearCollect(MeetingTimes, AddColumns(Office365Outlook.FindMeetingTimes(
            	{RequiredAttendees:Concat(MyPeople, UserPrincipalName & ";"), MeetingDuration:MeetingDurationSelect1.Selected.Minutes,
            	Start:Text(DateAdd(MeetingDateSelect1.SelectedDate, 8, TimeUnit.Hours), DateTimeFormat.UTC), End:Text(DateAdd(MeetingDateSelect1.SelectedDate, 17, TimeUnit.Hours), DateTimeFormat.UTC),
            	MaxCandidates:15, MinimumAttendeePercentage:1, IsOrganizerOptional: false, ActivityDomain: "Work"}).MeetingTimeSuggestions,
            "StartTime", MeetingTimeSlot.Start.DateTime, "EndTime", MeetingTimeSlot.End.DateTime))
            );
            UpdateContext({_loadingMeetingTimes: false});
            Set(_showMeetingTimes, true)
        PaddingBottom: =5
        PaddingLeft: =5
        PaddingRight: =5
        PaddingTop: =5
        TabIndex: =0
        Tooltip: ="Select to add user to collection"
        Visible: |-
            =!IsBlank(TextSearchBox2.Text) && 
                       
            /*Is user entry a valid email address*/
            IsMatch(TextSearchBox2.Text, Match.Email) &&
                       
            Not(Trim(TextSearchBox2.Text) in MyPeople.UserPrincipalName) &&!_showDetails
        X: =TextSearchBox2.X + TextSearchBox2.Width - Self.Width
        Y: =TextSearchBox2.Y
        ZIndex: =11

    MeetingPeopleGallery1 As gallery.SelectedUsersGalleryMeetingVariant:
        AccessibleLabel: ="Attendees that have been added to the meeting. At least one attendee must be added."
        Height: =Min(58 * RoundUp(CountRows(Self.AllItems) / 4, 0), 114)
        Items: =MyPeople
        Layout: =Layout.Vertical
        ShowScrollbar: =Self.Height >= 114
        TemplatePadding: =8
        TemplateSize: =42
        Visible: =!_showDetails
        Width: =Parent.Width - Self.X * 2
        WrapCount: =4
        X: =32
        Y: =TextSearchBox2.Y + TextSearchBox2.Height
        ZIndex: =12

        Separator2 As rectangle:
            Height: =Parent.TemplateHeight
            OnSelect: =Select(Parent)
            Width: =Parent.TemplateWidth
            ZIndex: =1

        Title3 As label:
            FocusedBorderThickness: =2
            Height: =MeetingPeopleGallery1.TemplateHeight
            OnSelect: =Set(_selectedUser, ThisItem)
            PaddingLeft: =10
            Size: =18 * MeetingPeopleGallery1.TemplateHeight / 60
            TabIndex: =If(PeopleBrowseGallery2.Visible, -1, 0)
            Text: =ThisItem.DisplayName
            Width: =MeetingPeopleGallery1.TemplateWidth - iconRemove2.Width + 10
            Wrap: =false
            ZIndex: =2

        iconRemove2 As icon.Cancel:
            BorderColor: =Self.Color
            Color: =Title3.Color
            Height: =MeetingPeopleGallery1.TemplateHeight
            Icon: =Icon.Cancel
            OnSelect: |-
                =Remove(MyPeople, LookUp(MyPeople, UserPrincipalName = ThisItem.UserPrincipalName));Concurrent(
                Reset(TextSearchBox2),
                Set(_showMeetingTimes, false),
                UpdateContext({_loadMeetingTimes: true}),
                Set(_selectedMeetingTime, Blank()),
                Set(_selectedRoom, Blank()),
                Set(_roomListSelected, false),
                /*
                Uses Office365 Outlook FindMeetingTimes operation to find available meeting times given various parameters including a semicolon separated list of attendee email addresses,
                a meeting duration (in minutes), an acceptable start and end range to find the meeting.
                Attendee emails are retrieved from the MyPeople collection. Duration and Start/End are retrieved from their respective dropdowns, where Start is set to 8:00 AM on the date selected, and End is set to 5:00 PM on the date selected.
                */
                ClearCollect(MeetingTimes, AddColumns(Office365Outlook.FindMeetingTimes(
                	{RequiredAttendees:Concat(MyPeople, UserPrincipalName & ";"), MeetingDuration:MeetingDurationSelect1.Selected.Minutes,
                	Start:Text(DateAdd(MeetingDateSelect1.SelectedDate, 8, TimeUnit.Hours), DateTimeFormat.UTC), End:Text(DateAdd(MeetingDateSelect1.SelectedDate, 17, TimeUnit.Hours), DateTimeFormat.UTC),
                	MaxCandidates:15, MinimumAttendeePercentage:1, IsOrganizerOptional: false, ActivityDomain: "Work"}).MeetingTimeSuggestions,
                "StartTime", MeetingTimeSlot.Start.DateTime, "EndTime", MeetingTimeSlot.End.DateTime))
                );
                UpdateContext({_loadingMeetingTimes: false});
                Set(_showMeetingTimes, true)
            PaddingBottom: =17 * MeetingPeopleGallery1.TemplateHeight / 60
            PaddingLeft: =17 * MeetingPeopleGallery1.TemplateHeight / 60
            PaddingRight: =17 * MeetingPeopleGallery1.TemplateHeight / 60
            PaddingTop: =17 * MeetingPeopleGallery1.TemplateHeight / 60
            TabIndex: =If(PeopleBrowseGallery2.Visible, -1, 0)
            Tooltip: ="Select to remove user from collection"
            Width: =Self.Height
            X: =MeetingPeopleGallery1.TemplateWidth - Self.Width
            ZIndex: =3

    LblMeetingSubject1 As label:
        Height: =25
        Size: =13
        Text: ="*Subject"
        Visible: =!_showDetails
        Width: =120
        Wrap: =false
        X: =32
        Y: =MeetingPeopleGallery1.Y + MeetingPeopleGallery1.Height + 16
        ZIndex: =13

    TextMeetingSubject1 As text:
        AccessibleLabel: ="Add a subject"
        Default: =""
        HintText: ="Add a subject"
        PaddingLeft: =5
        TabIndex: =If(PeopleBrowseGallery2.Visible, -1, 0)
        Visible: =!_showDetails
        Width: =Parent.Width - Self.X * 2
        X: =32
        Y: =LblMeetingSubject1.Y + LblMeetingSubject1.Height + 6
        ZIndex: =14

    LblMeetingMessage1 As label:
        Height: =25
        Size: =13
        Text: ="Message"
        Visible: =!_showDetails
        Width: =200
        Wrap: =false
        X: =32
        Y: =TextMeetingSubject1.Y + TextMeetingSubject1.Height + 16
        ZIndex: =15

    TextMeetingMessage1 As text:
        AccessibleLabel: ="Add a message"
        Default: =""
        Height: =238
        HintText: ="Add a message"
        Mode: =TextMode.MultiLine
        PaddingLeft: =5
        TabIndex: =If(PeopleBrowseGallery2.Visible, -1, 0)
        Visible: =!_showDetails
        Width: =Parent.Width - Self.X * 2
        X: =32
        Y: =LblMeetingMessage1.Y + LblMeetingMessage1.Height + 6
        ZIndex: =16

    LblMeetingDate1 As label:
        Height: =25
        Size: =13
        Text: ="*Date"
        Visible: =_showDetails
        Width: =Parent.Width / 2 - 55.5
        Wrap: =false
        X: =32
        Y: =RectHeaderSep1.Y + RectHeaderSep1.Height + 16
        ZIndex: =17

    MeetingDateSelect1 As datepicker:
        AccessibleLabel: =Self.Tooltip
        DisplayMode: =If(IsEmpty(MyPeople), DisplayMode.Disabled, DisplayMode.Edit)
        OnChange: =Select(Self)
        OnSelect: |-
            =Concurrent(
            Reset(TextSearchBox2),
            Set(_showMeetingTimes, false),
            UpdateContext({_loadingMeetingTimes: true}),
            Set(_selectedMeetingTime, Blank()),
            Set(_selectedRoom, Blank()),
            Set(_roomListSelected, false),
            /*
            Uses Office365 Outlook FindMeetingTimes operation to find available meeting times given various parameters including a semicolon separated list of attendee email addresses,
            a meeting duration (in minutes), an acceptable start and end range to find the meeting.
            Attendee emails are retrieved from the MyPeople collection. Duration and Start/End are retrieved from their respective dropdowns, where Start is set to 8:00 AM on the date selected, and End is set to 5:00 PM on the date selected.
            */
            ClearCollect(MeetingTimes, AddColumns(Office365Outlook.FindMeetingTimes(
            	{RequiredAttendees:Concat(MyPeople, UserPrincipalName & ";"), MeetingDuration:MeetingDurationSelect1.Selected.Minutes,
            	Start:Text(DateAdd(MeetingDateSelect1.SelectedDate, 8, TimeUnit.Hours), DateTimeFormat.UTC), End:Text(DateAdd(MeetingDateSelect1.SelectedDate, 17, TimeUnit.Hours), DateTimeFormat.UTC),
            	MaxCandidates:15, MinimumAttendeePercentage:1, IsOrganizerOptional: false, ActivityDomain: "Work"}).MeetingTimeSuggestions,
            "StartTime", MeetingTimeSlot.Start.DateTime, "EndTime", MeetingTimeSlot.End.DateTime))
            );
            UpdateContext({_loadingMeetingTimes: false});
            Set(_showMeetingTimes, true)
        Tooltip: ="Select meeting date. Required for submission."
        Visible: =_showDetails
        Width: =Parent.Width / 2 - 55.5
        X: =32
        Y: =LblMeetingDate1.Y + LblMeetingDate1.Height + 3
        ZIndex: =18

    LblMeetingTime1 As label:
        Height: =25
        Size: =13
        Text: ="*Duration"
        Visible: =_showDetails
        Width: =Parent.Width / 2 - 55.5
        Wrap: =false
        X: =LblMeetingDate1.X + LblMeetingDate1.Width + 18.5
        Y: =RectHeaderSep1.Y + RectHeaderSep1.Height + 16
        ZIndex: =19

    MeetingDurationSelect1 As dropdown:
        AccessibleLabel: =Self.Tooltip
        DisplayMode: =If(IsEmpty(MyPeople), DisplayMode.Disabled, DisplayMode.Edit)
        Items: |-
            =Table(             
            {Name:Substitute("{0} hour(s)", "{0}", "0.5"), Minutes:30},             
            {Name:Substitute("{0} hour(s)", "{0}", "1"), Minutes:60},             
            {Name:Substitute("{0} hour(s)", "{0}", "1.5"), Minutes:90},             
            {Name:Substitute("{0} hour(s)", "{0}", "2"), Minutes:120},             
            {Name:Substitute("{0} hour(s)", "{0}", "2.5"), Minutes:150},             
            {Name:Substitute("{0} hour(s)", "{0}", "3"), Minutes:180},             
            {Name:Substitute("{0} hour(s)", "{0}", "3.5"), Minutes:210},             
            {Name:Substitute("{0} hour(s)", "{0}", "4"), Minutes:240})
        OnChange: =Select(MeetingDateSelect1)
        Tooltip: ="Select meeting duration. Required for submission."
        Visible: =_showDetails
        Width: =Parent.Width / 2 - 55.5
        X: =LblMeetingTime1.X
        Y: =LblMeetingTime1.Y + LblMeetingTime1.Height + 3
        ZIndex: =20

    RectTimeSep1 As rectangle:
        Height: =41
        Visible: =_showDetails
        Width: =Parent.Width
        Y: =MeetingDurationSelect1.Y + MeetingDurationSelect1.Height + 16
        ZIndex: =21

    LblTimeHeader1 As label:
        Height: =RectTimeSep1.Height
        PaddingLeft: =0
        Size: =12
        Text: ="Time"
        Visible: =_showDetails
        Width: =Parent.Width - 37
        Wrap: =false
        X: =32
        Y: =RectTimeSep1.Y
        ZIndex: =22

    iconTimesEmptyState1 As icon.Clock:
        DisplayMode: ="DisplayMode.View"
        Height: =42
        Icon: =Icon.Clock
        Visible: =( !_showMeetingTimes || CountRows(MeetingTimes) = 0 || IsEmpty(MyPeople) ) && _showDetails
        Width: =42
        X: =Parent.Width/2 - Self.Width/2
        Y: =FindMeetingTimesGallery1.Y + 58
        ZIndex: =23

    LblTimesEmptyState1 As label:
        Align: =Align.Center
        Height: =60
        Size: =13
        Text: =If(_loadingMeetingTimes, "Searching for open meeting times...", !_showMeetingTimes || IsEmpty(MyPeople), "Make a selection to view available times", CountRows(MeetingTimes) = 0, "No available times on selected date")
        Visible: =( !_showMeetingTimes || CountRows(MeetingTimes) = 0 || IsEmpty(MyPeople) ) && _showDetails
        Width: =645
        X: =Parent.Width/2 - Self.Width / 2
        Y: =iconTimesEmptyState1.Y + iconTimesEmptyState1.Height + 39
        ZIndex: =24

    FindMeetingTimesGallery1 As gallery.MeetingTimesGallery:
        AccessibleLabel: ="Available time slots sorted by percentage of attendees available. User must select a time slot to send a meeting request. Time slot selection required for submission."
        Height: =205
        Items: =MeetingTimes
        Layout: =Layout.Vertical
        TemplatePadding: =0
        TemplateSize: =71
        Visible: =_showMeetingTimes && _showDetails && !IsEmpty(MyPeople)
        Width: =Parent.Width
        Y: =LblTimeHeader1.Y + LblTimeHeader1.Height
        ZIndex: =25

        Separator3 As rectangle:
            Height: =2
            OnSelect: =Select(Parent)
            Width: =FindMeetingTimesGallery1.TemplateWidth
            Y: =69
            ZIndex: =1

        Rectangle3 As rectangle:
            BorderColor: =Title4.Color
            BorderThickness: =If(ThisItem.StartTime = _selectedMeetingTime.StartTime, 4, 0)
            Fill: =RGBA(0,0,0,0)
            Height: =Parent.TemplateHeight - 4
            HoverFill: =RGBA(0,0,0,0)
            OnSelect: =Select(Title4)
            Width: =Parent.TemplateWidth - 4
            X: =2
            Y: =2
            ZIndex: =2

        Title4 As label:
            BorderColor: =Self.Color
            FocusedBorderThickness: =2
            FontWeight: =FontWeight.Semibold
            Height: =35
            OnSelect: |-
                =Set(_selectedMeetingTime, ThisItem);
                UpdateContext({_loadingRooms: true});
                /*Collects user's tenant room lists (if any)*/
                If(IsEmpty(RoomsLists),
                 ClearCollect(RoomsLists, Office365Outlook.GetRoomLists().value));
                /*If tenant has no room lists, retrieves all the tenant rooms, and then retrieves their availabilities for the selected meeting time*/
                If(CountRows(RoomsLists) <= 1,
                 Set(_noRoomLists, true);
                 ClearCollect(AllRooms, Office365Outlook.GetRooms().value);
                 Set(_allRoomsConcat, Concat(FirstN(AllRooms, 20), Address & ";"));
                 ClearCollect(RoomTimeSuggestions, Office365Outlook.FindMeetingTimes({RequiredAttendees: _allRoomsConcat, MeetingDuration: MeetingDurationSelect1.Selected.Minutes,
                   Start: _selectedMeetingTime.StartTime & "Z", End: _selectedMeetingTime.EndTime & "Z", MinimumAttendeePercentage: "1",
                   IsOrganizerOptional: "false", ActivityDomain: "Unrestricted"}).MeetingTimeSuggestions);
                 ClearCollect(AvailableRooms, AddColumns(AddColumns(Filter(First(RoomTimeSuggestions).AttendeeAvailability,
                   Availability="Free"), "Address", Attendee.EmailAddress.Address), "Name", LookUp(AllRooms, Address = Attendee.EmailAddress.Address).Name));
                 ClearCollect(AvailableRoomsOptimal, DropColumns(DropColumns(AvailableRooms, "Availability"), "Attendee")),
                 Set(_roomListSelected, false));
                UpdateContext({_loadingRooms: false})
            Size: =18 * FindMeetingTimesGallery1.TemplateHeight / 104
            TabIndex: =0
            Text: =Text(DateAdd(DateTimeValue(ThisItem.StartTime), -TimeZoneOffset(), TimeUnit.Minutes), DateTimeFormat.ShortTime)
            Width: =160
            Wrap: =false
            X: =37
            Y: =5
            ZIndex: =3

        Subtitle2 As label:
            Color: =ColorFade(Title4.Color, 0.20)
            FocusedBorderThickness: =2
            Height: =FindMeetingTimesGallery1.TemplateHeight - Self.Y - 5
            OnSelect: =Select(Title4)
            Size: =18 * FindMeetingTimesGallery1.TemplateHeight / 104
            Text: |-
                =If(ThisItem.Confidence = 100, "All attendees available", "Unable to attend: "               
                 & Concat(Filter(ThisItem.AttendeeAvailability, Availability = "Busy" || Availability = "Oof"),               
                   LookUp(MyPeople, UserPrincipalName = Attendee.EmailAddress.Address || Mail = Attendee.EmailAddress.Address).DisplayName, ", "))
            VerticalAlign: =VerticalAlign.Bottom
            Width: =FindMeetingTimesGallery1.TemplateWidth - Self.X - 10
            X: =37
            Y: =Title4.Y + Title4.Height + 2
            ZIndex: =4

    RectLocationSep1 As rectangle:
        Height: =41
        Visible: =_showDetails
        Width: =Parent.Width
        Y: =FindMeetingTimesGallery1.Y + FindMeetingTimesGallery1.Height
        ZIndex: =26

    LblLocationHeader1 As label:
        Height: =RectTimeSep1.Height
        PaddingLeft: =0
        Size: =12
        Text: ="Location"
        Visible: =_showDetails
        Width: =Parent.Width - Self.X
        Wrap: =false
        X: =32
        Y: =RectLocationSep1.Y
        ZIndex: =27

    TextMeetingLocation1 As text:
        AccessibleLabel: ="Add a location"
        Default: =""
        HintText: ="Add a location"
        PaddingLeft: =40
        Visible: =_showDetails
        Width: =Parent.Width
        Y: =LblLocationHeader1.Y + LblLocationHeader1.Height
        ZIndex: =28

    RoomSearchIcon1 As icon.Search:
        Color: =RGBA(191, 190, 190, 1)
        Height: =Self.Width
        Icon: =Icon.Search
        PaddingBottom: =10
        PaddingLeft: =10
        PaddingRight: =10
        PaddingTop: =10
        Tooltip: ="Search"
        Visible: =_showDetails
        Width: =TextMeetingLocation1.Height
        X: =TextMeetingLocation1.X
        Y: =TextMeetingLocation1.Y
        ZIndex: =29

    RectSeparator1 As rectangle:
        Height: =2
        Visible: =_showDetails
        Width: =Parent.Width
        Y: =TextMeetingLocation1.Y + TextMeetingLocation1.Height
        ZIndex: =30

    LblRoomListName1 As label:
        FontWeight: =FontWeight.Semibold
        Height: =45
        PaddingLeft: =56
        Size: =13
        Text: =_selectedRoomList
        Visible: =_showDetails && _roomListSelected
        Width: =Parent.Width - Self.X
        Wrap: =false
        Y: =TextMeetingLocation1.Y + TextMeetingLocation1.Height
        ZIndex: =31

    RoomsBackNav1 As icon.ChevronLeft:
        Height: =45
        Icon: =Icon.ChevronLeft
        OnSelect: =Set(_roomListSelected, false)
        PaddingBottom: =9
        PaddingLeft: =9
        PaddingRight: =9
        PaddingTop: =9
        TabIndex: =0
        Tooltip: ="return to previous list"
        Visible: =_roomListSelected && _showDetails
        Width: =45
        Y: =LblRoomListName1.Y
        ZIndex: =32

    iconRoomsEmptyState1 As icon.Waypoint:
        DisplayMode: ="DisplayMode.View"
        Height: =50
        Icon: =Icon.Waypoint
        Visible: =Or(_showDetails && Or(IsBlank(_selectedMeetingTime), _loadingRooms), CountRows(AvailableRoomsOptimal) = 0 && Or(_noRoomLists, _roomListSelected))
        Width: =50
        X: =Parent.Width/2 - Self.Width/2
        Y: =RoomBrowseGallery1.Y + 25
        ZIndex: =33

    LblRoomsEmptyState1 As label:
        Align: =Align.Center
        Height: =60
        Size: =13
        Text: =If(_loadingRooms, "Gathering available rooms...", IsBlank(_selectedMeetingTime), "Select a time to view available locations", CountRows(AvailableRoomsOptimal) = 0, "No rooms available at that time.")
        Visible: =Or(_showDetails && Or(IsBlank(_selectedMeetingTime), _loadingRooms), CountRows(AvailableRoomsOptimal) = 0 && Or(_noRoomLists, _roomListSelected))
        Width: =645
        X: =Parent.Width/2 - Self.Width / 2
        Y: =iconRoomsEmptyState1.Y + iconRoomsEmptyState1.Height + 30
        ZIndex: =34

    RoomBrowseGallery1 As gallery.RoomsListVariant:
        Height: =Parent.Height - Self.Y
        Items: =Search(If(_roomListSelected || _noRoomLists, AvailableRoomsOptimal, RoomsLists), Trim(TextMeetingLocation1.Text), "Name", "Address")
        Layout: =Layout.Vertical
        TemplatePadding: =0
        TemplateSize: =71
        Visible: =_showDetails && !IsBlank(_selectedMeetingTime) && !_loadingRooms
        Width: =Parent.Width
        Y: =If(_roomListSelected, LblRoomListName1.Y + LblRoomListName1.Height, RectSeparator1.Y + RectSeparator1.Height)
        ZIndex: =35

        Rectangle4 As rectangle:
            BorderColor: =Title5.Color
            BorderThickness: =If(ThisItem.Address = _selectedRoom.Address, 4, 0)
            Fill: =RGBA(0,0,0,0)
            Height: =Parent.TemplateHeight - 4
            HoverFill: =RGBA(0,0,0,0)
            OnSelect: =Select(Title5)
            Width: =Parent.TemplateWidth - 4
            X: =2
            Y: =2
            ZIndex: =1

        Title5 As label:
            BorderColor: =Self.Color
            FocusedBorderThickness: =2
            FontWeight: =If(!_roomListSelected, FontWeight.Semibold, FontWeight.Normal)
            OnSelect: |-
                =/*If user is viewing room lists, then retrieves the availabilities for the rooms within that list during the selected meeting time
                If user is viewing rooms, selects that room*/               
                UpdateContext({_loadingRooms: true});                   
                If(!_roomListSelected && !_noRoomLists,                   
                 Set(_roomListSelected, true);                   
                 Set(_selectedRoomList, ThisItem.Name);                   
                 ClearCollect(AllRooms, Office365Outlook.GetRoomsInRoomList(ThisItem.Address).value);                   
                 Set(_allRoomsConcat, Concat(FirstN(AllRooms, 20), Address & ";"));                   
                 ClearCollect(RoomTimeSuggestions, Office365Outlook.FindMeetingTimes({RequiredAttendees: _allRoomsConcat, MeetingDuration: MeetingDurationSelect1.Selected.Minutes,                   
                   Start: _selectedMeetingTime.StartTime & "Z", End: _selectedMeetingTime.EndTime & "Z", MinimumAttendeePercentage: "1",                   
                   IsOrganizerOptional: "false", ActivityDomain: "Unrestricted"}).MeetingTimeSuggestions);                   
                 ClearCollect(AvailableRooms, AddColumns(AddColumns(Filter(First(RoomTimeSuggestions).AttendeeAvailability, Availability = "Free"),                   
                   "Address", Attendee.EmailAddress.Address), "Name", LookUp(AllRooms, Address = Attendee.EmailAddress.Address).Name));                   
                 ClearCollect(AvailableRoomsOptimal, DropColumns(DropColumns(AvailableRooms, "Availability"), "Attendee")),                   
                 Set(_selectedRoom, ThisItem)                   
                );                   
                UpdateContext({_loadingRooms: false})
            Size: =18 * RoomBrowseGallery1.TemplateHeight / 104
            TabIndex: =0
            Text: =ThisItem.Name
            Width: =RoomBrowseGallery1.TemplateWidth - Self.X * 2 - 50
            Wrap: =false
            X: =37
            Y: =RoomBrowseGallery1.TemplateHeight / 2 - Self.Height / 2
            ZIndex: =2

        iconAdd1 As icon.ChevronRight:
            Height: =Self.Width
            Icon: =Icon.ChevronRight
            OnSelect: =Select(Title5)
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =!_roomListSelected && !_noRoomLists
            Width: =64 * RoomBrowseGallery1.TemplateHeight / 150
            X: =RoomBrowseGallery1.TemplateWidth - Self.Width - 10
            Y: =RoomBrowseGallery1.TemplateHeight / 2 - Self.Height / 2
            ZIndex: =3

        Separator4 As rectangle:
            Height: =1
            OnSelect: =Select(Parent)
            Width: =RoomBrowseGallery1.TemplateWidth
            Y: =RoomBrowseGallery1.TemplateHeight - Self.Height
            ZIndex: =4

    PeopleBrowseGallery2 As gallery.PeoplePickerGallerySmallMeetingVariant:
        AccessibleLabel: ="User look up search results"
        BorderThickness: =If(Len(Trim(TextSearchBox2.Text)) > 0, 2, 0)
        Fill: =TextSearchBox2.Fill
        Height: =If(Len(Trim(TextSearchBox2.Text)) > 0, Parent.Height - Self.Y - 10, 0)
        Items: |-
            =If(!IsBlank(Trim(TextSearchBox2.Text)), Office365Users.SearchUser({searchTerm: Trim(TextSearchBox2.Text), top: 15}))
        Layout: =Layout.Vertical
        TemplatePadding: =0
        TemplateSize: =71
        Visible: =!_showDetails && Len(Trim(TextSearchBox2.Text)) > 0
        Width: =Parent.Width - Self.X * 2
        X: =32
        Y: =TextSearchBox2.Y + TextSearchBox2.Height
        ZIndex: =36

        Rectangle5 As rectangle:
            BorderColor: =Title6.Color
            BorderThickness: =If(ThisItem.UserPrincipalName in MyPeople.UserPrincipalName, 4, 0)
            Fill: =RGBA(0,0,0,0)
            Height: =Parent.TemplateHeight
            HoverFill: =RGBA(0,0,0,0)
            OnSelect: =Select(Title6)
            Width: =Parent.TemplateWidth
            ZIndex: =1

        Title6 As label:
            BorderColor: =Self.Color
            FocusedBorderThickness: =2
            FontWeight: =FontWeight.Semibold
            Height: =PeopleBrowseGallery2.TemplateHeight * 0.35
            OnSelect: |-
                =Concurrent(
                Reset(TextSearchBox2),
                Set(_selectedUser, ThisItem),
                If(Not(ThisItem.UserPrincipalName in MyPeople.UserPrincipalName), 
                	Collect(MyPeople, ThisItem); 
                	Concurrent(
                	Set(_showMeetingTimes, false),
                	UpdateContext({_loadMeetingTimes: true}),
                	Set(_selectedMeetingTime, Blank()),
                	Set(_selectedRoom, Blank()),
                	Set(_roomListSelected, false),
                /*
                Uses Office365 Outlook FindMeetingTimes operation to find available meeting times given various parameters including a semicolon separated list of attendee email addresses,
                a meeting duration (in minutes), an acceptable start and end range to find the meeting.
                Attendee emails are retrieved from the MyPeople collection. Duration and Start/End are retrieved from their respective dropdowns, where Start is set to 8:00 AM on the date selected, and End is set to 5:00 PM on the date selected.
                */
                	ClearCollect(MeetingTimes, AddColumns(Office365Outlook.FindMeetingTimes(
                		{RequiredAttendees:Concat(MyPeople, UserPrincipalName & ";"), MeetingDuration:MeetingDurationSelect1.Selected.Minutes,
                		Start:Text(DateAdd(MeetingDateSelect1.SelectedDate, 8, TimeUnit.Hours), DateTimeFormat.UTC), End:Text(DateAdd(MeetingDateSelect1.SelectedDate, 17, TimeUnit.Hours), DateTimeFormat.UTC),
                		MaxCandidates:15, MinimumAttendeePercentage:1, IsOrganizerOptional: false, ActivityDomain: "Work"}).MeetingTimeSuggestions,
                	"StartTime", MeetingTimeSlot.Start.DateTime, "EndTime", MeetingTimeSlot.End.DateTime))
                	);
                UpdateContext({_loadingMeetingTimes: false});
                Set(_showMeetingTimes, true)
                ))
            Size: =21 * PeopleBrowseGallery2.TemplateHeight / 104
            TabIndex: =0
            Text: =ThisItem.DisplayName
            Width: =PeopleBrowseGallery2.TemplateWidth - Self.X - 20
            Wrap: =false
            X: =16
            Y: =0.1 * PeopleBrowseGallery2.TemplateHeight
            ZIndex: =2

        Subtitle3 As label:
            Color: =ColorFade(Title6.Color, 0.20)
            FocusedBorderThickness: =2
            Height: =PeopleBrowseGallery2.TemplateHeight * 0.35
            OnSelect: =Select(Title6)
            Size: =18 * PeopleBrowseGallery2.TemplateHeight / 104
            Text: =ThisItem.UserPrincipalName
            Width: =Title6.Width
            Wrap: =false
            X: =Title6.X
            Y: =0.9 * PeopleBrowseGallery2.TemplateHeight - Self.Height
            ZIndex: =3

        Separator5 As rectangle:
            Height: =1
            OnSelect: =Select(Parent)
            Width: =Parent.TemplateWidth
            Y: =Parent.TemplateHeight - 1
            ZIndex: =4

